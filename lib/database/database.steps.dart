// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    workouts,
    categories,
    exercises,
    workoutExercises,
    sets,
    users,
  ];
  late final Shape0 workouts = Shape0(
      source: i0.VersionedTable(
        entityName: 'workouts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 categories = Shape1(
      source: i0.VersionedTable(
        entityName: 'categories',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(uuid, name)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_9,
          _column_10,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 exercises = Shape2(
      source: i0.VersionedTable(
        entityName: 'exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(uuid, name)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_11,
          _column_12,
          _column_13,
          _column_7,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 workoutExercises = Shape3(
      source: i0.VersionedTable(
        entityName: 'workout_exercises',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_14,
          _column_15,
          _column_16,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 sets = Shape4(
      source: i0.VersionedTable(
        entityName: 'sets',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_17,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_6,
          _column_23,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 users = Shape5(
      source: i0.VersionedTable(
        entityName: 'users',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_24,
          _column_25,
          _column_7,
          _column_26,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get endTime =>
      columnsByName['end_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_3(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('start_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_5(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('end_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('notes', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_7(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime,
        defaultValue: const CustomExpression(
            'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)'));
i1.GeneratedColumn<DateTime> _column_8(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('updated_at', aliasedName, false,
        type: i1.DriftSqlType.dateTime,
        defaultValue: const CustomExpression(
            'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)'));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('description', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get categoryId =>
      columnsByName['category_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get instructions =>
      columnsByName['instructions']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'));
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>('category_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES categories (id)'));
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('instructions', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get workoutId =>
      columnsByName['workout_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get exerciseId =>
      columnsByName['exercise_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get orderInWorkout =>
      columnsByName['order_in_workout']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('workout_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES workouts (id) ON DELETE CASCADE'));
i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>('exercise_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES exercises (id)'));
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('order_in_workout', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get workoutExerciseId =>
      columnsByName['workout_exercise_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get setNumber =>
      columnsByName['set_number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get weight =>
      columnsByName['weight']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get reps =>
      columnsByName['reps']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get duration =>
      columnsByName['duration']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get rpe =>
      columnsByName['rpe']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notes =>
      columnsByName['notes']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isWarmup =>
      columnsByName['is_warmup']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('workout_exercise_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES workout_exercises (id) ON DELETE CASCADE'));
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>('set_number', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_19(String aliasedName) =>
    i1.GeneratedColumn<double>('weight', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>('reps', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_21(String aliasedName) =>
    i1.GeneratedColumn<int>('duration', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_22(String aliasedName) =>
    i1.GeneratedColumn<int>('rpe', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<bool> _column_23(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_warmup', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_warmup" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isCurrent =>
      columnsByName['is_current']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'));
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>('email', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'));
i1.GeneratedColumn<bool> _column_26(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_current', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_current" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
